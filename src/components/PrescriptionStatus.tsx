
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Download, Clock, CheckCircle, Stethoscope, AlertCircle, FileText } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface PrescriptionStatusProps {
  request: {
    id: string;
    status: 'pending' | 'in_progress' | 'completed';
    prescription_required: boolean;
    is_referral?: boolean;
    prescription?: {
      id: string;
      medications: string;
      instructions: string;
      pdf_url?: string;
      created_at: string;
    } | null;
  };
}

const PrescriptionStatus = ({ request }: PrescriptionStatusProps) => {
  const [isDownloading, setIsDownloading] = useState(false);
  const { toast } = useToast();

  const handleViewPrescription = async () => {
    if (!request.prescription) return;
    
    setIsDownloading(true);
    try {
      if (request.prescription.pdf_url) {
        // The pdf_url now contains just the filename/path within the bucket
        const { supabase } = await import('@/integrations/supabase/client');
        
        let filePath = request.prescription.pdf_url;
        
        // If it's a full URL, extract the filename
        if (filePath.includes('http') || filePath.includes('/storage/v1/object/')) {
          // Extract path after the bucket name from full URL
          const pathMatch = filePath.match(/\/storage\/v1\/object\/[^/]+\/prescriptions\/(.+)(?:\?|$)/);
          if (pathMatch) {
            filePath = pathMatch[1];
          } else {
            // Try to extract filename from the end of URL
            const urlParts = filePath.split('/');
            const filenameWithQuery = urlParts[urlParts.length - 1];
            filePath = filenameWithQuery.split('?')[0]; // Remove query parameters
          }
        }
        
        // Create a fresh signed URL using the file path
        const { data, error } = await supabase.storage
          .from('prescriptions')
          .createSignedUrl(filePath, 3600); // 1 hour expiry
        
        if (error) {
          console.error('Error creating signed URL:', error);
          throw new Error(`Failed to create download link: ${error.message}`);
        }
        
        const downloadUrl = data.signedUrl;

        // Try multiple download strategies
        const downloadStrategies = [
          // Strategy 1: Direct download link
          () => {
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.target = '_blank';
            link.rel = 'noopener noreferrer';
            link.download = `prescription-${request.id}.pdf`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          },
          // Strategy 2: Fetch and blob download
          async () => {
            const response = await fetch(downloadUrl);
            if (!response.ok) throw new Error('Network response was not ok');
            
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `prescription-${request.id}.pdf`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Clean up
            setTimeout(() => window.URL.revokeObjectURL(url), 100);
          },
          // Strategy 3: Window.open fallback
          () => {
            window.open(downloadUrl, '_blank');
          }
        ];

        // Try each strategy in order
        for (let i = 0; i < downloadStrategies.length; i++) {
          try {
            await downloadStrategies[i]();
            toast({
              title: "Download Started",
              description: "Your prescription is being downloaded.",
            });
            return;
          } catch (strategyError) {
            console.warn(`Download strategy ${i + 1} failed:`, strategyError);
            if (i === downloadStrategies.length - 1) {
              throw strategyError;
            }
          }
        }
        return;
      }

      // If no PDF URL, show a message that PDF is being generated
      toast({
        title: "PDF Not Ready",
        description: "The prescription PDF is being generated by your doctor. Please check back in a few minutes.",
        variant: "destructive",
      });
    } catch (error) {
      console.error('Error handling prescription:', error);
      toast({
        title: "Error", 
        description: "Failed to download prescription. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsDownloading(false);
    }
  };

  const isReferral = !request.prescription_required;

  if (request.status === 'completed' && request.prescription) {
    return (
      <Button
        variant="default"
        size="sm"
        onClick={handleViewPrescription}
        disabled={isDownloading}
        className="bg-green-600 hover:bg-green-700"
      >
        <Download className="h-4 w-4 mr-1" />
        {isDownloading ? 'Loading...' : isReferral ? 'View Referral' : 'View Prescription'}
      </Button>
    );
  }

  if (request.status === 'completed' && !request.prescription) {
    return (
      <Button
        variant="outline"
        size="sm"
        disabled
        className="text-orange-600 border-orange-200"
      >
        <Clock className="h-4 w-4 mr-1" />
        {isReferral ? 'Generating Referral' : 'Generating Prescription'}
      </Button>
    );
  }

  if (request.status === 'pending') {
    return (
      <Badge variant="outline" className="text-yellow-600 border-yellow-200 bg-yellow-50">
        <Clock className="h-3 w-3 mr-1" />
        Awaiting Doctor Review
      </Badge>
    );
  }

  if (request.status === 'in_progress') {
    return (
      <Badge variant="outline" className="text-blue-600 border-blue-200 bg-blue-50">
        <Stethoscope className="h-3 w-3 mr-1" />
        Doctor Reviewing
      </Badge>
    );
  }

  return null;
};

export default PrescriptionStatus;
